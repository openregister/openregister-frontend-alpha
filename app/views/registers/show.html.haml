= content_for :page_title, "Register"

.container
  .breadcrumbs{"data-module" => "track-click"}
    %ol
      %li
        = link_to "Components", "https://www.gov.uk/service-toolkit", target: :blank
      %li
        = link_to "GOV.UK Registers", root_path
      %li
        = link_to "View registers", root_path
      %li.active
        #{prepare_register_name(params[:register])} register

%main.container{role:'main'}
  %header.page-header

    - if params[:phase] != 'beta'
      .grid-row
        .column-two-thirds
          .panel.panel-border-wide.phase
            %span.phase-tag In progress
            %p This data is at an experimental stage and itâ€™s not ready for use yet. #{link_to 'Contact the team', 'https://registers.cloudapps.digital/support', target: :blank} if you want to give us feedback.

    .grid-row
      .column-two-thirds
        %h1.heading-xlarge.register-name #{prepare_register_name(params[:register])} register

        %dl
          %dt Updated on:
          %dd= DateTime.parse(@register_meta_data['last-updated']).strftime('%d/%m/%Y')
          %dt Owner:
          %dd= @register_meta_data['custodian']

        %p= @register_meta_data['register-record']['text']

        %details{:role => "group"}
          %summary{"aria-controls" => "details-content-0", "aria-expanded" => "false", :role => "button"}
            %span.summary Use this list to build your service
          #details-content-0.panel.panel-border-narrow{"aria-hidden" => "true"}
            %p This list is a register. Using registers to build your service means you and your service users will only ever work with one reliable and current source of data.

            %p
              = link_to "Using registers", "https://registers.cloudapps.digital/using-registers"
              %br
              = link_to "Technical documentation", "https://registers-docs.cloudapps.digital/#technical-user-documentation-for-registers"

        %details{:role => "group"}
          %summary{"aria-controls" => "details-content-0", "aria-expanded" => "false", :role => "button"}
            %span.summary What are registers?
          #details-content-0.panel.panel-border-narrow{"aria-hidden" => "true"}
            %p Registers are lists of information, each register is the most reliable list of its kind.

            %p Some registers can be combined with other registers to provide more information.

            %p
              = link_to "Using registers", "https://registers.cloudapps.digital/using-registers", target: :blank
              %br
              = link_to "Technical documentation", "https://registers-docs.cloudapps.digital", target: :blank

      .column-one-third.about
        %h2.heading-small Managed by
        %div{class: "govuk-organisation-logo #{@register_meta_data['register-record']['registry']}"}
          %div{class: "logo-container #{crest_class_name(@register_meta_data['register-record']['registry'].parameterize)}"}
            %span= prepare_register_name(@register_meta_data['register-record']['registry'])

        %h2.heading-small Learn more
        %ul
          %li
            = link_to "Update history", "#{params[:register]}/entries"
          %li
            = link_to "Technical documentation", "https://registers-docs.cloudapps.digital", target: :blank
          %li
            = link_to "Create a register", "https://www.gov.uk/guidance/creating-a-register", target: :blank
          %li
            = link_to "Contact the team", "https://registers.cloudapps.digital/support", target: :blank

  .search-wrapper
    .grid-row
      .column-one-third.js-enabled
        %div
          %form
            %fieldset
              .form-group
                = label_tag 'Filter by', nil, class: 'form-label', for: 'search'
                = select_tag "filter_results", options_for_select([['All', 'all'], ['Currently active', 'true'], ['Expired', 'false']], selected: params[:current]), class: "form-control"

      .column-one-third.js-enabled
        %div{class: "js-filter-list", "aria-hidden" => "true"}
          %form.js-filter-form
            %fieldset
              .form-group
                %label{class: "form-label", for: "search"} Search for a #{params[:register]}
                %input{name: "search", id: "search", class: "form-control"}

    %h2.heading-large
      = @records.count
      = prepare_register_name(params[:register]).pluralize(@register_meta_data['total-records'])

    %details{:role => "group"}
      %summary{"aria-controls" => "details-content-0", "aria-expanded" => "false", :role => "button"}
        %span.summary Download this data
      #details-content-0.panel.panel-border-narrow{"aria-hidden" => "true"}
        \#TODO

    %details{:role => "group"}
      %summary{"aria-controls" => "details-content-0", "aria-expanded" => "false", :role => "button"}
        %span.summary What are the table headers?
      #details-content-0.panel.panel-border-narrow{"aria-hidden" => "true"}
        %dl
          - @register_meta_data['register-record']['fields'].each do |item|
            - register_fields = @all_fields.select{ |field| field == item }
            - register_fields.each do |field|
              %dt= field[1]['key']
              %dd= field[1]['item'][0]['text']

  %table.js-filter-block
    %thead
      %tr
        - @register_meta_data['register-record']['fields'].each do |field|
          %th= field

    %tbody
      = render partial: 'record', collection: @records

= content_for :head do
  %script{src: "//code.jquery.com/jquery-3.2.1.min.js"}
  %script{src: "//cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.28.14/js/jquery.tablesorter.min.js"}

= content_for :javascript do
  :javascript
    function replaceQueryString(url, param, value) {
      var re = new RegExp("([?|&])" + param + "=.*?(&|$)","i");
      if (url.match(re))
        return url.replace(re,'$1' + param + "=" + value + '$2');
      else
        return url + '&' + param + "=" + value;
    }

    jQuery(function($) {
      GOVUK.filterListItems.init();
      $(".js-filter-block").tablesorter({ sortList: [[1,0]] });

      $("#filter_results").change(function () {
        if(document.location.href.includes('current')) {
          var url = replaceQueryString(window.location.href, 'current', this.value);
        } else {
          var url = document.location.href + "&current=" + this.value;
        }
        document.location = url;
      });
    });
